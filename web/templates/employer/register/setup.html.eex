<div class="employerSetupForm container container--mobile">
  <div class="logo logo--sm"></div>
  <p class="tagLine">Looks good! Now finish the profile for <strong>XYZ Nonprofit.</strong></p>
  <form action="">
    <h3>Logo</h3>
    <div class="picChooser">
      <img class="picChooser-pic" src="/images/employerPlaceholder.svg"></img>
      <label for="file-upload" class="picChooser-btn btn btn--xshort" type="file">Choose...</label>
      <input id="file-upload" class="picChooser-file" name="logo" type="file" accept=".jpg,.jpeg,.png">
    </div>
    <h3>Interests</h3>
    <div class="select">
      <input name="interests" class="select-input input-default" type="text" placeholder="Select a major here..." readonly>
      <ul class="select-datalist is-hidden">
        <li class="select-datalist-empty"><i>No major found</i></li>
        <li class="select-datalist-option">Computer Science</li>
        <li class="select-datalist-option">Environmental Law</li>
      </ul>
    </div>
    <div class="selectedOptions"></div>
    <input class="btn btn--short" type="submit" value="Done!">
  </form>
</div>


<script type="text/javascript">
  // NOTE: This function probably needs to go in /web/static/js/utils.js and imported in app.js
  function previewImage(input, targetSelector) {
    if (input.files && input.files[0]) {
      // NOTE: FilReader API is supported in IE10+
      var reader = new FileReader();
      reader.readAsDataURL(input.files[0]);
      reader.onload = (e) => {
        document.querySelector(targetSelector).src = e.target.result;
      }
    }
  }

  // TODO: Add ability to navigate the major list with arrow up and arrow down
  function navigateList({ keyCode }) {
    if (keyCode === 38) {
      console.log('arrowUp');
    }
    else if (keyCode === 40) {
      console.log('arrowDown');
    }
  }

  // NOTE: This function can also go into utils.js
  function placeList(input, list) {
    let { top: inputTop, left: inputLeft} = input.getBoundingClientRect(),
        compoundedHeight = inputTop + input.offsetHeight + list.offsetHeight,
        windowHeight = window.innerHeight;
    compoundedHeight > windowHeight ? list.classList.add('is-onTop') : list.classList.remove('is-onTop');
  };

  //
  function createSelectedOption(text, count) {
    let div = document.createElement('div'),
        el = document.createElement('input'),
        x = document.createElement('div');
    x.classList.add('x-mark');
    x.onclick = removeSelectedOption;
    el.type = 'text';
    el.name = 'major-' + count;
    el.readOnly = true;
    el.value = text;
    div.classList.add('major');
    div.appendChild(el);
    div.appendChild(x);
    return div;
  }

  // 
  function removeSelectedOption(e) {
    // NOTE: Are the following assignments unclear? I feel like these aren't easy to read/understand
    let el = e.target.parentNode,
        major = el.firstChild.value,
        options = document.querySelectorAll('.select-datalist-option');

    // NOTE: Possibly need to polyfill remove()
    el.remove();
    // NOTE: Is there a faster/clearer way to search for the element with the desired innerText?
    //   Maybe if the element has data- attribute, we can look it up like this:
    // document.querySelector('.option[data-major="' + major + '"]');
    for (var i = 0; i < options.length; i++) {
      if (options[i].textContent === major) {
        options[i].classList.remove('is-hidden');
      }
    }
  }


  document.addEventListener('DOMContentLoaded', () => {
    let uploader = document.querySelector('.picChooser-file'),
        major = document.querySelector('.select-input'),
        list = document.querySelector('.select-datalist'),
        counter = 0,
        options = document.querySelectorAll('.select-datalist-option'),
        selectedList = document.querySelector('.selectedOptions');
    
    // Preview the selected image
    uploader.onchange = () => { previewImage(uploader, '.picChooser-pic'); };

    // Toggle the major list
    major.addEventListener('blur', () => {
      list.classList.add('is-hidden');
      window.removeEventListener('keydown', navigateList);
    });
    major.addEventListener('focus', () => {
      list.classList.remove('is-hidden');
      placeList(major, list);
      window.addEventListener('keydown', navigateList);
    });

    // Select a major
    for (var i = 0; i < options.length; i++) {
      options[i].addEventListener('mousedown', (e) => {
        let el = createSelectedOption(e.target.innerHTML, counter++);
        selectedList.appendChild(el);
        e.target.classList.add('is-hidden');
      });
    }
  });
</script>